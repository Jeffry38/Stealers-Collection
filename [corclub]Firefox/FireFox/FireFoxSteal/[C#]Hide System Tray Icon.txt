using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

namespace HideTrayIcon
{
    internal class TB
    {
        public const uint HIDEBUTTON = WM.USER + 4;
        public const uint SETSTATE = WM.USER + 17;
        public const uint GETBUTTON = WM.USER + 23;
        public const uint BUTTONCOUNT = WM.USER + 24;
        public const uint CUSTOMIZE = WM.USER + 27;
        public const uint GETBUTTONTEXTA = WM.USER + 45;
        public const uint GETBUTTONTEXTW = WM.USER + 75;
    }

    internal class TBSTATE
    {
        public const uint CHECKED = 0x01;
        public const uint PRESSED = 0x02;
        public const uint ENABLED = 0x04;
        public const uint HIDDEN = 0x08;
        public const uint INDETERMINATE = 0x10;
        public const uint WRAP = 0x20;
        public const uint ELLIPSES = 0x40;
        public const uint MARKED = 0x80;
    }

    internal class WM
    {
        public const uint CLOSE = 0x0010;
        public const uint GETICON = 0x007F;
        public const uint KEYDOWN = 0x0100;
        public const uint COMMAND = 0x0111;
        public const uint USER = 0x0400; // 0x0400 - 0x7FFF
        public const uint APP = 0x8000; // 0x8000 - 0xBFFF
    }

    class Program
    {
        [DllImport("user32.dll", SetLastError = true)]
        static extern IntPtr FindWindowA(string lpClassName, string lpWindowName);
        [DllImport("user32.dll", SetLastError = true)]
        static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);
        [DllImport("user32.dll")]
        public static extern IntPtr SendMessage(
            IntPtr hWnd,
            UInt32 msg,
            IntPtr wParam,
            IntPtr lParam);

        [DllImport("user32.dll")]
        public static extern UInt32 SendMessage(
            IntPtr hWnd,
            UInt32 msg,
            UInt32 wParam,
            UInt32 lParam);

        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        [DllImport("kernel32.dll")]
        static extern IntPtr OpenProcess(ProcessAccessFlags dwDesiredAccess, [MarshalAs(UnmanagedType.Bool)] bool bInheritHandle, int dwProcessId);

        [Flags]
        enum ProcessAccessFlags : uint
        {
            All = 0x001F0FFF,
            Terminate = 0x00000001,
            CreateThread = 0x00000002,
            VMOperation = 0x00000008,
            VMRead = 0x00000010,
            VMWrite = 0x00000020,
            DupHandle = 0x00000040,
            SetInformation = 0x00000200,
            QueryInformation = 0x00000400,
            Synchronize = 0x00100000
        }

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern bool VirtualFreeEx(IntPtr hProcess, IntPtr lpAddress, int dwSize, FreeType dwFreeType);

        [Flags]
        public enum FreeType
        {
            Decommit = 0x4000,
            Release = 0x8000,
        }

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress,
           uint dwSize, AllocationType flAllocationType, MemoryProtection flProtect);

        [DllImport("user32.dll", EntryPoint = "PostMessage")]
        public static extern int PostMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, IntPtr lpBuffer, uint dwSize, out IntPtr lpNumberOfBytesRead);

        [Flags]
        public enum AllocationType
        {
            Commit = 0x1000,
            Reserve = 0x2000,
            Decommit = 0x4000,
            Release = 0x8000,
            Reset = 0x80000,
            Physical = 0x400000,
            TopDown = 0x100000,
            WriteWatch = 0x200000,
            LargePages = 0x20000000
        }

        [Flags]
        public enum MemoryProtection
        {
            Execute = 0x10,
            ExecuteRead = 0x20,
            ExecuteReadWrite = 0x40,
            ExecuteWriteCopy = 0x80,
            NoAccess = 0x01,
            ReadOnly = 0x02,
            ReadWrite = 0x04,
            WriteCopy = 0x08,
            GuardModifierflag = 0x100,
            NoCacheModifierflag = 0x200,
            WriteCombineModifierflag = 0x400
        }

        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool CloseHandle(IntPtr hObject);

        [StructLayout(LayoutKind.Sequential)]
        internal struct TBBUTTON
        {
            public Int32 iBitmap;
            public Int32 idCommand;
            public byte fsState;
            public byte fsStyle;
            public byte bReserved1;
            public byte bReserved2;
            public UInt32 dwData;
            public IntPtr iString;
        }

        public static List<string> texts = new List<string>();

        static void Main(string[] args)
        {
            IntPtr result = FindWindowA("Shell_TrayWnd", null);
            IntPtr res = FindWindowEx(result, IntPtr.Zero, "TrayNotifyWnd", null);
            res = FindWindowEx(res, IntPtr.Zero, "SysPager", null);
            res = FindWindowEx(res, IntPtr.Zero, "ToolbarWindow32", null);

            UInt32 count = SendMessage(res, TB.BUTTONCOUNT, 0, 0);

            for (int i = 0; i < count; i++ )
            {
                TBBUTTON tbButton = new TBBUTTON();
                string text = String.Empty;
                IntPtr ipWindowHandle = IntPtr.Zero;

                bool b = GetTBButton(res, i, ref tbButton, ref text, ref ipWindowHandle);
                if(text.Equals("Get Windows 10"))
                    SendMessage(res, TB.SETSTATE, (uint)tbButton.idCommand, TBSTATE.HIDDEN);
 
            }
                Console.ReadKey();
        }
        private static unsafe bool GetTBButton(IntPtr hToolbar, int i, ref TBBUTTON tbButton, ref string text, ref IntPtr ipWindowHandle)
        {
            // One page
            const int BUFFER_SIZE = 0x1000;

            byte[] localBuffer = new byte[BUFFER_SIZE];

            UInt32 processId = 0;
            UInt32 threadId = GetWindowThreadProcessId(hToolbar, out processId);

            IntPtr hProcess = OpenProcess(ProcessAccessFlags.All, false, (int)processId);
            if (hProcess == IntPtr.Zero) { Debug.Assert(false); return false; }

            IntPtr ipRemoteBuffer = VirtualAllocEx(
                hProcess,
                IntPtr.Zero,
                (uint)new UIntPtr(BUFFER_SIZE),
                AllocationType.Commit,
                MemoryProtection.ReadWrite);

            if (ipRemoteBuffer == IntPtr.Zero) { Debug.Assert(false); return false; }

            // TBButton
            fixed (TBBUTTON* pTBButton = &tbButton)
            {
                IntPtr ipTBButton = new IntPtr(pTBButton);

                int b = (int)SendMessage(hToolbar, TB.GETBUTTON, (IntPtr)i, ipRemoteBuffer);


                if (b == 0) { Debug.Assert(false); return false; }

                // this is fixed
                Int32 dwBytesRead = 0;
                IntPtr ipBytesRead = new IntPtr(&dwBytesRead);

                bool b2 = ReadProcessMemory(
                    hProcess,
                    ipRemoteBuffer,
                    ipTBButton,
                    (uint)new UIntPtr((uint)sizeof(TBBUTTON)),
                    out ipBytesRead);

                if (!b2) { Debug.Assert(false); return false; }
            }

            // button text
            fixed (byte* pLocalBuffer = localBuffer)
            {
                IntPtr ipLocalBuffer = new IntPtr(pLocalBuffer);

                int chars = (int)SendMessage(hToolbar, TB.GETBUTTONTEXTW, (IntPtr)tbButton.idCommand, ipRemoteBuffer);

                if (chars == -1) { Debug.Assert(false); return false; }

                // this is fixed
                Int32 dwBytesRead = 0;
                IntPtr ipBytesRead = new IntPtr(&dwBytesRead);

                bool b4 = ReadProcessMemory(
                    hProcess,
                    ipRemoteBuffer,
                    ipLocalBuffer,
                    (uint)new UIntPtr(BUFFER_SIZE),
                    out ipBytesRead);

                if (!b4) { Debug.Assert(false); return false; }

                text = Marshal.PtrToStringUni(ipLocalBuffer, chars);

                texts.Add(text);

                if (text == " ") text = String.Empty;
            }

            VirtualFreeEx(
                hProcess,
                ipRemoteBuffer,
                (int)UIntPtr.Zero,
                FreeType.Release);

            CloseHandle(hProcess);

            return true;
        }
    }
}