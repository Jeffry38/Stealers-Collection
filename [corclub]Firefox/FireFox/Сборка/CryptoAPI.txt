using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using Microsoft.Win32;

namespace PassDecrypt
{

	public static class CryptoAPI
	{

		public static string Decrypt(byte[] blob)
		{

			if (blob == null)
				throw new ArgumentNullException(&quot;blob&quot;);

			byte[] decryptedBytes = ProtectedData.Unprotect(blob, null, DataProtectionScope.CurrentUser);
			return Encoding.UTF8.GetString(decryptedBytes);
		
}

		public static string DecryptStringFromBase64(string cipherText)
		{

			byte[] data = Convert.FromBase64String(cipherText);
			return Encoding.UTF8.GetString(data);
		
}

		public static string ANSIStringFromHex(string hexString)
		{

			if (hexString.Length % 2 == 1)
				throw new Exception(&quot;The binary key cannot have an odd number of digits&quot;);
			StringBuilder sb = new StringBuilder(hexString.Length / 2);
			for (int i = 0; i &lt; hexString.Length; i += 2)
			{

				string hs = hexString.Substring(i, 2);
				sb.Append(Convert.ToChar(Convert.ToUInt32(hs, 16)));
			
}
			return sb.ToString();
		
}

		public static byte[] HexStringToByteArray(string hex)
		{

			if (hex.Length % 2 == 1)
				throw new Exception(&quot;The binary key cannot have an odd number of digits&quot;);

			byte[] arr = new byte[hex.Length &gt;&gt; 1];

			for (int i = 0; i &lt; hex.Length &gt;&gt; 1; ++i)
			{

				arr[i] = (byte)((GetHexVal(hex[i &lt;&lt; 1]) &lt;&lt; 4) + (GetHexVal(hex[(i &lt;&lt; 1) + 1])));
			
}

			return arr;
		
}

		public static int GetHexVal(char hex)
		{

			int val = (int)hex;
			//For uppercase A-F letters:
			return val - (val &lt; 58 ? 48 : 55);
			//For lowercase a-f letters:
			//return val - (val &lt; 58 ? 48 : 87);
			//Or the two combined, but a bit slower:
			//return val - (val &lt; 58 ? 48 : (val &lt; 97 ? 55 : 87));
		
}


		static T ByteArrayToStructure&lt;T&gt;(byte[] bytes) where T : struct
		{

			GCHandle handle = GCHandle.Alloc(bytes, GCHandleType.Pinned);
			T stuff = (T)Marshal.PtrToStructure(handle.AddrOfPinnedObject(), typeof(T));
			handle.Free();
			return stuff;
		
}

		private const string KeyStr = &quot;Software\\Microsoft\\Internet Explorer\\IntelliForms\\Storage2&quot;;

		public static bool DecryptIePassword(string url, List&lt;string[]&gt; dataList)
		{

			//Get the hash for the passed URL
			string urlHash = GetURLHashString(url);

			//Check if this hash matches with stored hash in registry
			if (!DoesURLMatchWithHash(urlHash))
				return false;

			//Now retrieve the encrypted credentials for this registry hash entry....
			RegistryKey key = Registry.CurrentUser.OpenSubKey(KeyStr);
			if (key == null)
				return false;

			//Retrieve encrypted data for this website hash...
			//First get the value...
			byte[] cypherBytes = (byte[])key.GetValue(urlHash);
			key.Close();

			// to use URL as optional entropy we must include trailing null character
			byte[] optionalEntropy = new byte[2 * (url.Length + 1)];
			Buffer.BlockCopy(url.ToCharArray(), 0, optionalEntropy, 0, url.Length * 2);

			//Now decrypt the Autocomplete credentials....
			byte[] decryptedBytes = ProtectedData.Unprotect(cypherBytes, optionalEntropy, DataProtectionScope.CurrentUser);

			var ieAutoHeader = ByteArrayToStructure&lt;IEAutoComplteSecretHeader&gt;(decryptedBytes);

			//check if the data contains enough length....
			if (decryptedBytes.Length &gt;= (ieAutoHeader.dwSize + ieAutoHeader.dwSecretInfoSize + ieAutoHeader.dwSecretSize))
			{

				//Get the total number of secret entries (username &amp; password) for the site...
				// user name and passwords are accounted as separate secrets, but will be threated in pairs here.
				uint dwTotalSecrets = ieAutoHeader.IESecretHeader.dwTotalSecrets / 2;

				int sizeOfSecretEntry = Marshal.SizeOf(typeof(SecretEntry));
				byte[] secretsBuffer = new byte[ieAutoHeader.dwSecretSize];
				int offset = (int) (ieAutoHeader.dwSize + ieAutoHeader.dwSecretInfoSize);
				Buffer.BlockCopy(decryptedBytes, offset, secretsBuffer, 0, secretsBuffer.Length);

				if (dataList == null)
					dataList = new List&lt;string[]&gt;();
				else
					dataList.Clear();

				offset = Marshal.SizeOf(ieAutoHeader);
				// Each time process 2 secret entries for username &amp; password
				for (int i = 0; i &lt; dwTotalSecrets; i++)
				{

					byte[] secEntryBuffer = new byte[sizeOfSecretEntry];
					Buffer.BlockCopy(decryptedBytes, offset, secEntryBuffer, 0, secEntryBuffer.Length);

					SecretEntry secEntry = ByteArrayToStructure&lt;SecretEntry&gt;(secEntryBuffer);

					string[] dataTriplet = new string[3]; // store data such as url, username &amp; password for each secret 

					byte[] secret1 = new byte[secEntry.dwLength * 2];
					Buffer.BlockCopy(secretsBuffer, (int)secEntry.dwOffset, secret1, 0, secret1.Length);

					dataTriplet[0] = Encoding.Unicode.GetString(secret1);

					// read another secret entry
					offset += sizeOfSecretEntry;
					Buffer.BlockCopy(decryptedBytes, offset, secEntryBuffer, 0, secEntryBuffer.Length);
					secEntry = ByteArrayToStructure&lt;SecretEntry&gt;(secEntryBuffer);

					byte[] secret2 = new byte[secEntry.dwLength * 2]; //Get the next secret's offset i.e password
					Buffer.BlockCopy(secretsBuffer, (int) secEntry.dwOffset, secret2, 0, secret2.Length);

					dataTriplet[1] = Encoding.Unicode.GetString(secret2);

					dataTriplet[2] = urlHash;
					//move to next entry
					dataList.Add(dataTriplet);
					offset += sizeOfSecretEntry;
				
}
			
}
			return true;
		
} //End of function


		static string GetURLHashString(string wstrURL)
		{

			IntPtr hProv = IntPtr.Zero;
			IntPtr hHash = IntPtr.Zero;

			CryptAcquireContext(out hProv, String.Empty, string.Empty, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);

			if (!CryptCreateHash(hProv, ALG_ID.CALG_SHA1, IntPtr.Zero, 0, ref hHash))
				throw new Win32Exception(Marshal.GetLastWin32Error());

			byte[] bytesToCrypt = Encoding.Unicode.GetBytes(wstrURL);

			StringBuilder urlHash = new StringBuilder(42);
			if (CryptHashData(hHash, bytesToCrypt, (wstrURL.Length + 1) * 2, 0))
			{

				// retrieve 20 bytes of hash value
				uint dwHashLen = 20;
				byte[] buffer = new byte[dwHashLen];

				//Get the hash value now...
				if (!CryptGetHashParam(hHash, HashParameters.HP_HASHVAL, buffer, ref dwHashLen, 0))
					throw new Win32Exception(Marshal.GetLastWin32Error());

				//Convert the 20 byte hash value to hexadecimal string format...
				byte tail = 0; // used to calculate value for the last 2 bytes
				urlHash.Length = 0;
				for (int i = 0; i &lt; dwHashLen; ++i)
				{

					byte c = buffer[i];
					tail += c;
					urlHash.AppendFormat(&quot;{
0:X2
}&quot;, c);
				
}
				urlHash.AppendFormat(&quot;{
0:X2
}&quot;, tail);

				CryptDestroyHash(hHash);
			
}
			CryptReleaseContext(hProv, 0);

			return urlHash.ToString();
		
}

		static bool DoesURLMatchWithHash(string urlHash)
		{

			// enumerate values of the target registry
			bool result = false;
			RegistryKey key = Registry.CurrentUser.OpenSubKey(KeyStr);
			if (key == null)
				return false;

			string[] values = key.GetValueNames();
			foreach (string value in values)
			{

				// compare the value of the retrieved registry with the hash value of the history URL
				if (value == urlHash)
				{

					result = true;
					break;
				
}
			
}
			return result;
		
}

		#region Win32 Interop

		// IE Autocomplete Secret Data structures decoded by Nagareshwar
		//
		//One Secret Info header specifying number of secret strings
		[StructLayout(LayoutKind.Sequential)]
		struct IESecretInfoHeader
		{

			public uint dwIdHeader;     // value - 57 49 43 4B
			public uint dwSize;         // size of this header....24 bytes
			public uint dwTotalSecrets; // divide this by 2 to get actual website entries
			public uint unknown;
			public uint id4;            // value - 01 00 00 00
			public uint unknownZero;
		
};

		//Main Decrypted Autocomplete Header data
		[StructLayout(LayoutKind.Sequential)]
		struct IEAutoComplteSecretHeader
		{

			public uint dwSize;                        //This header size
			public uint dwSecretInfoSize;              //= sizeof(IESecretInfoHeader) + numSecrets * sizeof(SecretEntry);
			public uint dwSecretSize;                  //Size of the actual secret strings such as username &amp; password
			public IESecretInfoHeader IESecretHeader;  //info about secrets such as count, size etc
			//SecretEntry secEntries[numSecrets];      //Header for each Secret String
			//WCHAR secrets[numSecrets];               //Actual Secret String in Unicode
		
};

		// Header describing each of the secrets such ass username/password.
		// Two secret entries having same SecretId are paired
		[StructLayout(LayoutKind.Explicit)]
		struct SecretEntry
		{

			[FieldOffset(0)]
			public uint dwOffset;           //Offset of this secret entry from the start of secret entry strings

			[FieldOffset(4)]
			public byte SecretId;           //UNIQUE id associated with the secret
			[FieldOffset(5)]
			public byte SecretId1;
			[FieldOffset(6)]
			public byte SecretId2;
			[FieldOffset(7)]
			public byte SecretId3;
			[FieldOffset(8)]
			public byte SecretId4;
			[FieldOffset(9)]
			public byte SecretId5;
			[FieldOffset(10)]
			public byte SecretId6;
			[FieldOffset(11)]
			public byte SecretId7;

			[FieldOffset(12)]
			public uint dwLength;           //length of this secret
		
};

		private const uint PROV_RSA_FULL = 1;
		private const uint CRYPT_VERIFYCONTEXT = 0xF0000000;

		private const int ALG_CLASS_HASH = 4 &lt;&lt; 13;
		private const int ALG_SID_SHA1 = 4;
		private enum ALG_ID
		{

			CALG_MD5 = 0x00008003,
			CALG_SHA1 = ALG_CLASS_HASH | ALG_SID_SHA1
		
}
		[DllImport(&quot;advapi32.dll&quot;, CharSet = CharSet.Ansi, SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool CryptAcquireContext(out IntPtr phProv, string pszContainer, string pszProvider, uint dwProvType, uint dwFlags);

		[DllImport(&quot;advapi32.dll&quot;, SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool CryptCreateHash(IntPtr hProv, ALG_ID algid, IntP
...