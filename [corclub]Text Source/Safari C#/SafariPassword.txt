using System;
using System.Runtime.InteropServices;

// tiré de http://securityxploded.com/safari-password-secrets.php
public class SafariPassword
{
    private struct DATA_BLOB
    {
        public int cbData;
        public IntPtr pbData;
    }
    [System.Runtime.InteropServices.DllImport("kernel32.dll")]
    private static extern int LocalFree(IntPtr hMem);
    [System.Runtime.InteropServices.DllImport("crypt32.dll")]
    private static extern int CryptUnprotectData(ref DATA_BLOB pDataIn, IntPtr ppszDataDescr, ref DATA_BLOB pOptionalEntropy, IntPtr pvReserved, IntPtr pPromptStruct, int dwFlags, ref DATA_BLOB pDataOut);

    internal SafariPassword(string server, string user, byte[] password)
    {
        this.m_Server = server;
        this.m_UserName = user;
        this.m_PasswordValue = password;
    }

    private string m_Server;
    public string Server
    {
        get
        {
            return m_Server;
        }
    }
    private string m_UserName;
    public string UserNameValue
    {
        get
        {
            return m_UserName;
        }
    }

    private byte[] salt = new[] { 0x1D, 0xA, 0xA8, 0xF8, 0xD3, 0xB8, 0x48, 0x3E, 0x48, 0x7D, 0x3E, 0xA, 0x62, 0x7, 0xDD, 0x26, 0xE6, 0x67, 0x81, 0x3, 0xE7, 0xB2, 0x13, 0xA5, 0xB0, 0x79, 0xEE, 0x4F, 0xF, 0x41, 0x15, 0xED, 0x7B, 0x14, 0x8, 0xE5, 0x4B, 0x46, 0xD, 0xC1, 0x8E, 0xFE, 0xD6, 0xE7, 0x27, 0x75, 0x6, 0x8B, 0x49, 0x0, 0xD, 0xF, 0x30, 0xA0, 0x9E, 0xFD, 0x9, 0x85, 0xF1, 0xC8, 0xAA, 0x75, 0xC1, 0x8, 0x5, 0x79, 0x1, 0xE2, 0x97, 0xD8, 0xAF, 0x80, 0x38, 0x60, 0xB, 0x71, 0xE, 0x68, 0x53, 0x77, 0x2F, 0xF, 0x61, 0xF6, 0x1D, 0x8E, 0x8F, 0x5, 0xB2, 0x3D, 0x21, 0x74, 0x40, 0x4B, 0xB5, 0x6, 0x6E, 0xAB, 0x7A, 0xBD, 0x8B, 0xA9, 0x7E, 0x32, 0x8F, 0x6E, 0x6, 0x24, 0xD9, 0x29, 0xA4, 0xA5, 0xBE, 0x26, 0x23, 0xFD, 0xEE, 0xF1, 0x4, 0xF, 0x74, 0x5E, 0x58, 0xFB, 0x91, 0x74, 0xEF, 0x91, 0x63, 0x6F, 0x6D, 0x2E, 0x61, 0x70, 0x70, 0x6, 0x65, 0x2E, 0x53, 0x61, 0x66, 0x61, 0x72, 0x69 };
    private byte[] m_PasswordValue;
    public string PasswordValue
    {
        get
        {
            IntPtr ptr = Marshal.AllocHGlobal(this.m_PasswordValue.Length);
            IntPtr ptrEntropy = Marshal.AllocHGlobal(salt.Length);
            Marshal.Copy(this.m_PasswordValue, 0, ptr, this.m_PasswordValue.Length);
            Marshal.Copy(salt, 0, ptrEntropy, salt.Length);

            DATA_BLOB din = new DATA_BLOB();
            din.cbData = this.m_PasswordValue.Length;
            din.pbData = ptr;
            DATA_BLOB dent = new DATA_BLOB();
            dent.cbData = salt.Length;
            dent.pbData = ptrEntropy;
            DATA_BLOB dout = new DATA_BLOB();
            CryptUnprotectData(ref din, IntPtr.Zero, ref dent, IntPtr.Zero, IntPtr.Zero, 0, ref dout);

            int len = Marshal.ReadInt32(dout.pbData);
            string ret = Marshal.PtrToStringAnsi(new IntPtr(dout.pbData.ToInt64() + 4), len);

            Marshal.FreeHGlobal(ptr);
            Marshal.FreeHGlobal(ptrEntropy);

            return ret;
        }
    }
}
